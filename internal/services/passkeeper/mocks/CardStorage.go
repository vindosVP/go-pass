// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/vindosVP/go-pass/internal/models"
)

// CardStorage is an autogenerated mock type for the CardStorage type
type CardStorage struct {
	mock.Mock
}

// AddCard provides a mock function with given fields: ctx, card
func (_m *CardStorage) AddCard(ctx context.Context, card *models.Card) (int, error) {
	ret := _m.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for AddCard")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Card) (int, error)); ok {
		return rf(ctx, card)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Card) int); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Card) error); ok {
		r1 = rf(ctx, card)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCard provides a mock function with given fields: ctx, id, ownerID
func (_m *CardStorage) DeleteCard(ctx context.Context, id int, ownerID int) error {
	ret := _m.Called(ctx, id, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, id, ownerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCards provides a mock function with given fields: ctx, ownerID
func (_m *CardStorage) GetCards(ctx context.Context, ownerID int) ([]*models.Card, error) {
	ret := _m.Called(ctx, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCards")
	}

	var r0 []*models.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Card, error)); ok {
		return rf(ctx, ownerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Card); ok {
		r0 = rf(ctx, ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCard provides a mock function with given fields: ctx, card
func (_m *CardStorage) UpdateCard(ctx context.Context, card *models.Card) error {
	ret := _m.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCardStorage creates a new instance of CardStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCardStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *CardStorage {
	mock := &CardStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
