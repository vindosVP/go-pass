// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/vindosVP/go-pass/internal/models"

	passkeeperv1 "github.com/vindosVP/go-pass/internal/proto/passkeeper"
)

// Keeper is an autogenerated mock type for the Keeper type
type Keeper struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id, ownerID, t
func (_m *Keeper) Delete(ctx context.Context, id int, ownerID int, t models.EntityType) error {
	ret := _m.Called(ctx, id, ownerID, t)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, models.EntityType) error); ok {
		r0 = rf(ctx, id, ownerID, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadFile provides a mock function with given fields: id, ownerID, str
func (_m *Keeper) DownloadFile(id int, ownerID int, str passkeeperv1.PassKeeper_DownloadFileServer) error {
	ret := _m.Called(id, ownerID, str)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, passkeeperv1.PassKeeper_DownloadFileServer) error); ok {
		r0 = rf(id, ownerID, str)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, ownerID
func (_m *Keeper) List(ctx context.Context, ownerID int) ([]*models.Entity, error) {
	ret := _m.Called(ctx, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*models.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Entity, error)); ok {
		return rf(ctx, ownerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Entity); ok {
		r0 = rf(ctx, ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, e
func (_m *Keeper) Save(ctx context.Context, e *models.Entity) (int, error) {
	ret := _m.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Entity) (int, error)); ok {
		return rf(ctx, e)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Entity) int); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Entity) error); ok {
		r1 = rf(ctx, e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFile provides a mock function with given fields: str
func (_m *Keeper) SaveFile(str passkeeperv1.PassKeeper_UploadFileServer) error {
	ret := _m.Called(str)

	if len(ret) == 0 {
		panic("no return value specified for SaveFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(passkeeperv1.PassKeeper_UploadFileServer) error); ok {
		r0 = rf(str)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, e
func (_m *Keeper) Update(ctx context.Context, e *models.Entity) error {
	ret := _m.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Entity) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewKeeper creates a new instance of Keeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Keeper {
	mock := &Keeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
